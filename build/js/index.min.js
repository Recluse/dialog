(function () {
  'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);

    if (Object.getOwnPropertySymbols) {
      var symbols = Object.getOwnPropertySymbols(object);
      if (enumerableOnly) symbols = symbols.filter(function (sym) {
        return Object.getOwnPropertyDescriptor(object, sym).enumerable;
      });
      keys.push.apply(keys, symbols);
    }

    return keys;
  }

  function _objectSpread2(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};

      if (i % 2) {
        ownKeys(Object(source), true).forEach(function (key) {
          _defineProperty(target, key, source[key]);
        });
      } else if (Object.getOwnPropertyDescriptors) {
        Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
      } else {
        ownKeys(Object(source)).forEach(function (key) {
          Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
      }
    }

    return target;
  }

  var _window = window,
      scrollIntoView = _window.scrollIntoView; // ! dev
  // const setScrollingElement = (parent) => {
  //   if (getComputedStyle(parent).overflow === 'hidden') {
  //     return false;
  //   }
  //   return true;
  // };
  // ! dev

  var Tabs = /*#__PURE__*/function () {
    function Tabs(props) {
      _classCallCheck(this, Tabs);

      var containerElem = props.containerElem,
          controlsBoxElem = props.controlsBoxElem,
          panelSelector = props.panelSelector,
          controlsSelector = props.controlsSelector,
          controlsActiveClassName = props.controlsActiveClassName,
          panelActiveClassName = props.panelActiveClassName,
          indexAttrName = props.indexAttrName,
          _props$activeIndex = props.activeIndex,
          activeIndex = _props$activeIndex === void 0 ? 0 : _props$activeIndex;
      this.controlsBox = controlsBoxElem;
      this.panels = containerElem.querySelectorAll(panelSelector);
      this.controlsActiveClassName = controlsActiveClassName;
      this.controlsSelector = controlsSelector;
      this.controls = controlsBoxElem.querySelectorAll(controlsSelector);
      this.panelActiveClassName = panelActiveClassName;
      this.indexAttrName = indexAttrName;
      this.activeIndex = activeIndex;
      this.onControlBoxClick = this.onControlBoxClick.bind(this);
      this.changeActiveState = this.changeActiveState.bind(this);
      this.setControlsState = this.setControlsState.bind(this);
      this.setPanelState = this.setPanelState.bind(this);
      this.removeListeners = this.removeListeners.bind(this);
      this.destroy = this.destroy.bind(this);
    }

    _createClass(Tabs, [{
      key: "setStartState",
      value: function setStartState() {
        var activeControl = this.controls[this.activeIndex];
        var activePanel = this.panels[this.activeIndex];
        activeControl.classList.add(this.controlsActiveClassName);
        activePanel.classList.add(this.panelActiveClassName);
      }
    }, {
      key: "setControlsState",
      value: function setControlsState(presentIndex) {
        var prevActiveControl = this.controls[this.activeIndex];
        var nowActiveControl = this.controls[presentIndex];
        prevActiveControl.classList.remove(this.controlsActiveClassName);
        nowActiveControl.classList.add(this.controlsActiveClassName);
        scrollIntoView(nowActiveControl, {
          behavior: 'smooth',
          block: 'nearest',
          inline: 'center',
          boundary: this.controlsBox
        });
      }
    }, {
      key: "setPanelState",
      value: function setPanelState(presentIndex) {
        var prevActivePanel = this.panels[this.activeIndex];
        var nowActivePanel = this.panels[presentIndex];
        prevActivePanel.classList.remove(this.panelActiveClassName);
        nowActivePanel.classList.add(this.panelActiveClassName);
      }
    }, {
      key: "changeActiveState",
      value: function changeActiveState(controlIndex) {
        this.setControlsState(controlIndex);
        this.setPanelState(controlIndex);
        this.activeIndex = controlIndex;
      }
    }, {
      key: "onControlBoxClick",
      value: function onControlBoxClick(evt) {
        var clickedControl = evt.target.closest(this.controlsSelector);
        if (!clickedControl) return;
        var controlIndex = parseInt(clickedControl.dataset[this.indexAttrName], 10);

        if (!Number.isNaN(controlIndex) && controlIndex !== this.activeIndex) {
          this.changeActiveState(controlIndex, clickedControl);
        }
      }
    }, {
      key: "addListeners",
      value: function addListeners() {
        if (this.controlsBox) {
          this.controlsBox.addEventListener('click', this.onControlBoxClick);
        }
      }
    }, {
      key: "removeListeners",
      value: function removeListeners() {
        this.controlsBox.removeEventListener('click', this.onControlBoxClick);
      }
    }, {
      key: "destroy",
      value: function destroy() {
        var activeControl = this.controls[this.activeIndex];
        var activePanel = this.panels[this.activeIndex];
        activeControl.classList.remove(this.controlsActiveClassName);
        activePanel.classList.remove(this.panelActiveClassName);
        this.removeListeners();
      }
    }], [{
      key: "init",
      value: function init(props) {
        var tabs = new Tabs(props);
        tabs.setStartState();
        tabs.addListeners();
        return tabs;
      }
    }]);

    return Tabs;
  }();

  var tabs = Tabs.init;

  var tabProps;
  var tabsInstance = null;

  var init = function init(props) {
    tabProps = props;
  };

  var launch = function launch() {
    tabsInstance = tabs(tabProps);
  };

  var destroy = function destroy() {
    if (!tabsInstance) return;
    tabsInstance.destroy();
    tabsInstance = null;
  };

  var tabs$1 = {
    init: init,
    launch: launch,
    destroy: destroy
  };

  var Accordion = /*#__PURE__*/function () {
    function Accordion(accordionBlock, options) {
      _classCallCheck(this, Accordion);

      var _options$triggerClass = options.triggerClassName,
          triggerClassName = _options$triggerClass === void 0 ? 'js-accordion-trigger' : _options$triggerClass,
          _options$detailsClass = options.detailsClassName,
          detailsClassName = _options$detailsClass === void 0 ? 'js-accordion-details' : _options$detailsClass,
          _options$triggerExpan = options.triggerExpandedClassName,
          triggerExpandedClassName = _options$triggerExpan === void 0 ? 'is-expanded' : _options$triggerExpan,
          _options$detailsHideC = options.detailsHideClassName,
          detailsHideClassName = _options$detailsHideC === void 0 ? 'is-hide' : _options$detailsHideC,
          _options$isDefaultExp = options.isDefaultExpanded,
          isDefaultExpanded = _options$isDefaultExp === void 0 ? false : _options$isDefaultExp,
          onExpand = options.onExpand;
      this.trigger = accordionBlock.querySelector(".".concat(triggerClassName));
      this.details = accordionBlock.querySelector(".".concat(detailsClassName));
      this.triggerExpandedClassName = triggerExpandedClassName;
      this.detailsHideClassName = detailsHideClassName;
      this.isDefaultExpanded = isDefaultExpanded;
      this.onExpand = onExpand;
      this.isExpanded = false;
      this.setStartState = this.setStartState.bind(this);
      this.addHandler = this.addHandler.bind(this);
      this.removeHandler = this.removeHandler.bind(this);
      this.handlerClick = this.handlerClick.bind(this);
      this.toggleState = this.toggleState.bind(this);
      this.expand = this.expand.bind(this);
      this.reduce = this.reduce.bind(this);
    }

    _createClass(Accordion, [{
      key: "setStartState",
      value: function setStartState() {
        var maxHeight = this.details.clientHeight;
        this.details.style.maxHeight = "".concat(maxHeight, "px");

        if (this.isDefaultExpanded) {
          this.expand();
        } else {
          this.reduce();
        }
      }
    }, {
      key: "expand",
      value: function expand() {
        this.trigger.setAttribute('aria-expanded', 'true');
        this.details.setAttribute('aria-hidden', 'false');
        this.trigger.classList.add(this.triggerExpandedClassName);
        this.details.classList.remove(this.detailsHideClassName);
        this.isExpanded = true;
        this.onExpand(this);
      }
    }, {
      key: "reduce",
      value: function reduce() {
        this.trigger.setAttribute('aria-expanded', 'false');
        this.details.setAttribute('aria-hidden', 'true');
        this.trigger.classList.remove(this.triggerExpandedClassName);
        this.details.classList.add(this.detailsHideClassName);
        this.isExpanded = false;
      }
    }, {
      key: "remove",
      value: function remove() {
        this.trigger.removeAttribute('aria-expanded');
        this.details.removeAttribute('aria-hidden');
        this.trigger.classList.remove(this.triggerExpandedClassName);
        this.details.classList.remove(this.detailsHideClassName);
        this.details.style.maxHeight = '';
        this.removeHandler();
      }
    }, {
      key: "toggleState",
      value: function toggleState(isExpanded) {
        if (isExpanded) {
          this.reduce();
          return;
        }

        this.expand();
      }
    }, {
      key: "handlerClick",
      value: function handlerClick(evt) {
        evt.preventDefault();
        var isExpanded = this.trigger.getAttribute('aria-expanded') === 'true';
        this.toggleState(isExpanded);
      }
    }, {
      key: "removeHandler",
      value: function removeHandler() {
        this.trigger.removeEventListener('click', this.handlerClick);
      }
    }, {
      key: "addHandler",
      value: function addHandler() {
        this.trigger.addEventListener('click', this.handlerClick);
      }
    }], [{
      key: "init",
      value: function init(accordionBlock) {
        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
        var accordion = new Accordion(accordionBlock, options);
        accordion.setStartState();
        accordion.addHandler();
        return accordion;
      }
    }]);

    return Accordion;
  }();

  var accordion = Accordion.init;

  var AccordionGroup = /*#__PURE__*/function () {
    function AccordionGroup(_ref) {
      var accordionBlocks = _ref.accordionBlocks,
          accordionProps = _ref.accordionProps,
          _ref$firstExpanded = _ref.firstExpanded,
          firstExpanded = _ref$firstExpanded === void 0 ? false : _ref$firstExpanded;

      _classCallCheck(this, AccordionGroup);

      this.accordionBlocks = accordionBlocks;
      this.accordionProps = accordionProps;
      this.firstExpanded = firstExpanded;
      this.accordions = [];
      this.onExpand = this.onExpand.bind(this);
      this.remove = this.remove.bind(this);
    }

    _createClass(AccordionGroup, [{
      key: "setStartState",
      value: function setStartState() {
        var _this = this;

        this.accordionBlocks.forEach(function (accordionBlock, index) {
          var accordionInstance = accordion(accordionBlock, _objectSpread2({
            onExpand: _this.onExpand,
            isDefaultExpanded: _this.firstExpanded && index === 0
          }, _this.accordionProps));

          _this.accordions.push(accordionInstance);
        });
      }
    }, {
      key: "onExpand",
      value: function onExpand(expandedAccordion) {
        this.accordions.forEach(function (accordionInstance) {
          if (accordionInstance !== expandedAccordion && accordionInstance.isExpanded) {
            accordionInstance.reduce();
          }
        });
      }
    }, {
      key: "remove",
      value: function remove() {
        this.accordions.forEach(function (accordion) {
          accordion.remove();
          accordion = null;
        });
        this.accordions = [];
      }
    }], [{
      key: "init",
      value: function init(options) {
        var accordionGroup = new AccordionGroup(options);
        accordionGroup.setStartState();
        return accordionGroup;
      }
    }]);

    return AccordionGroup;
  }();

  var accordionGroup = AccordionGroup.init;

  var blocks;
  var accordions;
  var isLaunched = false;

  var destroy$1 = function destroy() {
    if (isLaunched) {
      accordions.remove();
    }

    isLaunched = false;
  };

  var init$1 = function init(accordionsBlocks) {
    blocks = accordionsBlocks;
  };

  var launch$1 = function launch() {
    var options = {
      accordionBlocks: blocks,
      accordionProps: {
        triggerExpandedClassName: 'tabs__control--expanded',
        detailsHideClassName: 'tabs__content--hide'
      },
      firstExpanded: true
    };
    accordions = accordionGroup(options);
    isLaunched = true;
  };

  var accordions$1 = {
    init: init$1,
    launch: launch$1,
    destroy: destroy$1
  };

  var BreakpointChecker = /*#__PURE__*/function () {
    function BreakpointChecker(breakPointWidth, onCheck, onUnCheck) {
      _classCallCheck(this, BreakpointChecker);

      this.breakpoint = window.matchMedia("(max-width: ".concat(breakPointWidth, "px)"));
      this.onCheck = onCheck;
      this.onUnCheck = onUnCheck;
      this.check = this.check.bind(this);
    }

    _createClass(BreakpointChecker, [{
      key: "check",
      value: function check() {
        if (this.breakpoint.matches === true) {
          this.onCheck();
        }

        if (this.breakpoint.matches === false) {
          this.onUnCheck();
        }
      }
    }, {
      key: "removeListeners",
      value: function removeListeners() {
        this.breakpoint.removeListener(this.check);
      }
    }, {
      key: "addListeners",
      value: function addListeners() {
        this.breakpoint.addListener(this.check);
        this.check();
      }
    }], [{
      key: "init",
      value: function init(breakPointWidth, onCheck, onUnCheck) {
        var breakpointChecker = new BreakpointChecker(breakPointWidth, onCheck, onUnCheck);
        breakpointChecker.addListeners();
        return breakpointChecker;
      }
    }]);

    return BreakpointChecker;
  }();

  var breakpointChecker = BreakpointChecker.init;

  var constants = {
    keyCode: {
      ESC: 27
    },
    breakpoints: {
      mobileMax: 767,
      tabletMax: 1023,
      laptopMax: 1439
    }
  };

  var mobileMax = constants.breakpoints.mobileMax;

  var getTabsProps = function getTabsProps(functionsBlock) {
    return {
      containerElem: functionsBlock.querySelector('.tabs'),
      controlsBoxElem: functionsBlock.querySelector('.tabs__controls'),
      panelSelector: '.tabs__wrapper',
      controlsSelector: '.tabs__control',
      controlsActiveClassName: 'tabs__control--active',
      panelActiveClassName: 'tabs__wrapper--active',
      indexAttrName: 'tabIndex'
    };
  };

  var onNoMobileViewport = function onNoMobileViewport() {
    tabs$1.launch();
    accordions$1.destroy();
  };

  var onMobileViewPort = function onMobileViewPort() {
    tabs$1.destroy();
    accordions$1.launch();
  };

  var init$2 = function init() {
    var functionsBlock = document.querySelector('.functions');
    if (!functionsBlock) return;
    var accordionsBlocks = functionsBlock.querySelectorAll('.tabs__wrapper');
    var tabsProps = getTabsProps(functionsBlock);
    tabs$1.init(tabsProps);
    accordions$1.init(accordionsBlocks);
    breakpointChecker(mobileMax, onMobileViewPort, onNoMobileViewport);
  };

  var _window$1 = window,
      bodyScrollLock = _window$1.bodyScrollLock;
  var disableBodyScroll = bodyScrollLock.disableBodyScroll;
  var clearAllBodyScrollLocks = bodyScrollLock.clearAllBodyScrollLocks;
  var Esc = constants.keyCode.ESC; // const setIPhoneHeight = (elem) => {
  //   const isIPhone = /iPhone|iPod/i.test(navigator.userAgent);
  //   if(isIPhone) {
  //     elem.style.minHeight = '100%';
  //   }
  // };

  var Modal = /*#__PURE__*/function () {
    function Modal(props) {
      _classCallCheck(this, Modal);

      var modal = props.modal,
          openButton = props.openButton,
          closeButton = props.closeButton,
          overlay = props.overlay,
          contentContainer = props.contentContainer,
          _props$modalOpenClass = props.modalOpenClassName,
          modalOpenClassName = _props$modalOpenClass === void 0 ? 'is-open' : _props$modalOpenClass,
          _props$modalCloseClas = props.modalCloseClassName,
          modalCloseClassName = _props$modalCloseClas === void 0 ? 'is-hide' : _props$modalCloseClas,
          onOpenButtonClick = props.onOpenButtonClick,
          onShow = props.onShow,
          onHide = props.onHide;
      this.modal = modal;
      this.openButton = openButton;
      this.closeButton = closeButton;
      this.modalOpenClassName = modalOpenClassName;
      this.modalCloseClassName = modalCloseClassName;
      this.overlay = overlay;
      this.contentContainer = contentContainer ? contentContainer : modal;
      this.isShow = false;
      this.onOpenButtonClick = onOpenButtonClick;
      this.onShow = onShow;
      this.onHide = onHide;
      this.show = this.show.bind(this);
      this.hide = this.hide.bind(this);
      this.addHandlers = this.addHandlers.bind(this);
      this.openButtonClickHandler = this.openButtonClickHandler.bind(this);
      this.closeButtonClickHandler = this.closeButtonClickHandler.bind(this);
      this.addKeydownHandler = this.addKeydownHandler.bind(this);
      this.removeKeydownHandler = this.removeKeydownHandler.bind(this);
      this.onKeydown = this.onKeydown.bind(this);
      this.overlayClickHandler = this.overlayClickHandler.bind(this);
    }

    _createClass(Modal, [{
      key: "setStartState",
      value: function setStartState() {
        this.modal.classList.remove(this.modalOpenClassName);
        this.modal.classList.remove(this.modalCloseClassName);
        this.isShow = false;
        clearAllBodyScrollLocks();
      }
    }, {
      key: "show",
      value: function show() {
        this.modal.classList.add(this.modalOpenClassName);
        this.modal.classList.remove(this.modalCloseClassName);
        this.isShow = true;
        disableBodyScroll(this.modal);
        this.addKeydownHandler();

        if (this.onShow) {
          this.onShow();
        }
      }
    }, {
      key: "hide",
      value: function hide() {
        this.modal.classList.remove(this.modalOpenClassName);
        this.modal.classList.add(this.modalCloseClassName);
        this.isShow = false;
        clearAllBodyScrollLocks();
        this.removeKeydownHandler();

        if (this.onHide) {
          this.onHide();
        }
      }
    }, {
      key: "openButtonClickHandler",
      value: function openButtonClickHandler() {
        if (this.onOpenButtonClick) {
          this.onOpenButtonClick();
        }

        this.show();
      }
    }, {
      key: "closeButtonClickHandler",
      value: function closeButtonClickHandler() {
        this.hide();
      }
    }, {
      key: "overlayClickHandler",
      value: function overlayClickHandler(evt) {
        var target = evt.target;

        if (target === this.overlay) {
          this.hide();
        }
      }
    }, {
      key: "onKeydown",
      value: function onKeydown(evt) {
        if (evt.keyCode === Esc) {
          this.hide();
        }
      }
    }, {
      key: "removeKeydownHandler",
      value: function removeKeydownHandler() {
        document.removeEventListener('keydown', this.onKeydown);
      }
    }, {
      key: "addKeydownHandler",
      value: function addKeydownHandler() {
        document.addEventListener('keydown', this.onKeydown);
      }
    }, {
      key: "addHandlers",
      value: function addHandlers() {
        this.openButton.addEventListener('click', this.openButtonClickHandler);
        this.closeButton.addEventListener('click', this.closeButtonClickHandler);

        if (this.overlay) {
          this.overlay.addEventListener('click', this.overlayClickHandler);
        }
      }
    }], [{
      key: "init",
      value: function init(props) {
        var modal = new Modal(props);
        modal.addHandlers();
        modal.setStartState(); // setIPhoneHeight(modal.modal);

        return modal;
      }
    }]);

    return Modal;
  }();

  var popup = Modal.init;

  var _window$2 = window,
      iMask = _window$2.IMask;

  var getValidityState = function getValidityState(pattern, value) {
    var patternRegExp = new RegExp(pattern);
    return patternRegExp.test(value);
  };

  var Form = /*#__PURE__*/function () {
    function Form(form, onSubmit) {
      _classCallCheck(this, Form);

      this.form = form;
      this.fields = this.getFields();
      this.isStorageSupport = true;
      this.storage = '';
      this.onSubmit = onSubmit;
      this.getFields = this.getFields.bind(this);
      this.initFields = this.initFields.bind(this);
      this.addHandlers = this.addHandlers.bind(this);
      this.getLocalStorage = this.getLocalStorage.bind(this);
      this.formInputHandler = this.formInputHandler.bind(this);
      this.setStorage = this.setStorage.bind(this);
      this.checkFieldsValidity = this.checkFieldsValidity.bind(this);
      this.formSubmitHandler = this.formSubmitHandler.bind(this);
      this.validate = this.validate.bind(this);
      this.setValueFromStorage = this.setValueFromStorage.bind(this);
    }

    _createClass(Form, [{
      key: "getFields",
      value: function getFields() {
        var SELECTOR = 'input[type="text"], input[type="number"],input[type="tel"], input[type="email"],input[type="search"], input[type="url"], input[type="password"], select, textarea';
        var fieldsElements = this.form.querySelectorAll(SELECTOR);
        var fields = [].map.call(fieldsElements, function (fieldElement) {
          return {
            elem: fieldElement,
            mask: fieldElement.dataset.mask ? iMask(fieldElement, {
              mask: fieldElement.dataset.mask,
              lazy: true
            }) : false,
            pattern: fieldElement.getAttribute('pattern') ? fieldElement.getAttribute('pattern') : false,
            desc: fieldElement.getAttribute('title') ? fieldElement.getAttribute('title') : false,
            onFocus: fieldElement.dataset.focus === 'true',
            isValid: fieldElement.hasAttribute('required') ? false : true
          };
        });
        return fields;
      }
    }, {
      key: "initFields",
      value: function initFields() {
        this.fields.forEach(function (field) {
          if (field.onFocus) {
            field.elem.focus();
          }

          if (field.mask && field.pattern) {
            field.elem.removeAttribute('pattern');
          } // if (this.isStorageSupport) {
          //   this.setValueFromStorage(field);
          // }

        });
      }
    }, {
      key: "setStorage",
      value: function setStorage(target) {
        this.storage.setItem(target.id, target.value);
      }
    }, {
      key: "setValueFromStorage",
      value: function setValueFromStorage(field) {
        var storageValue = this.storage[field.elem.id];
        if (!storageValue) return;
        field.elem.value = storageValue;

        if (field.pattern) {
          this.validate(field);
        }
      }
    }, {
      key: "validate",
      value: function validate(field) {
        var value = field.mask ? field.mask.unmaskedValue : field.elem.value;

        if (value.length < 2) {
          return;
        }

        var isValid = getValidityState(field.pattern, value);

        if (isValid) {
          field.isValid = true;
          field.elem.classList.remove('error');
          field.elem.setCustomValidity('');
        } else {
          field.isValid = false;
          field.elem.classList.add('error');
          field.elem.setCustomValidity(field.desc);
        }
      }
    }, {
      key: "formInputHandler",
      value: function formInputHandler(evt) {
        var _this = this;

        var target = evt.target;

        if (this.isStorageSupport) {
          this.setStorage(target);
        }

        this.fields.forEach(function (field) {
          if (field.pattern && field.elem === target) {
            _this.validate(field);
          } else if (field.elem === target) {
            field.isValid = true;
          }
        });
      }
    }, {
      key: "checkFieldsValidity",
      value: function checkFieldsValidity() {
        var _this2 = this;

        this.fields.forEach(function (field) {
          if (!field.isValid && field.pattern) {
            _this2.validate(field);
          }
        });
      }
    }, {
      key: "formSubmitHandler",
      value: function formSubmitHandler(evt) {
        evt.preventDefault();
        var isFormValid = this.fields.every(function (field) {
          return field.isValid;
        });

        if (isFormValid) {
          if (this.submitCallBack) {
            this.submitCallBack();
          }
        } else {
          this.checkFieldsValidity();
        }
      }
    }, {
      key: "addHandlers",
      value: function addHandlers() {
        // this.form.addEventListener('input', this.formInputHandler);
        this.form.addEventListener('submit', this.formSubmitHandler);
      }
    }, {
      key: "getLocalStorage",
      value: function getLocalStorage() {
        try {
          this.storage = localStorage;
        } catch (err) {
          this.isStorageSupport = false;
        }
      }
    }], [{
      key: "init",
      value: function init(formElem, onSubmit) {
        var form = new Form(formElem, onSubmit);
        form.getLocalStorage();
        form.addHandlers();
        form.initFields();
        return form;
      }
    }]);

    return Form;
  }();

  var form = Form.init;

  var OfferModal = /*#__PURE__*/function () {
    function OfferModal(props) {
      _classCallCheck(this, OfferModal);

      this.props = props;
      this.modal;
      this.form;
      this.setModal = this.setModal.bind(this);
    }

    _createClass(OfferModal, [{
      key: "setModal",
      value: function setModal() {
        var offerModal = document.querySelector('#modal-offer');
        var formElem = offerModal.querySelector('#modal-offer-form');
        var modalProps = {
          modal: offerModal,
          overlay: offerModal.querySelector('.modal__overlay'),
          closeButton: offerModal.querySelector('.modal__close')
        };
        this.modal = popup(_objectSpread2(_objectSpread2({}, this.props), modalProps));
        this.form = form(formElem);
      }
    }], [{
      key: "init",
      value: function init(props) {
        var offerModal = new OfferModal(props);
        offerModal.setModal();
      }
    }]);

    return OfferModal;
  }();

  var offerModal = OfferModal.init;

  var mainPage = function mainPage() {
    var openModalButton = document.querySelector('.js-open-modal-hero');
    var formElem = document.querySelector('#offer-form');

    if (openModalButton) {
      offerModal({
        openButton: openModalButton
      });
    }

    if (formElem) {
      form(formElem);
    }

    init$2();
  };

  function debounce(cb, timeout) {
    return function (args) {
      var previousCall = this.lastCall;
      this.lastCall = Date.now();

      if (previousCall && this.lastCall - previousCall <= timeout) {
        clearTimeout(this.lastCallTimer);
      }

      this.lastCallTimer = setTimeout(function () {
        return cb(args);
      }, timeout);
    };
  }

  var Dropdown = /*#__PURE__*/function () {
    function Dropdown(options) {
      _classCallCheck(this, Dropdown);

      var block = options.block,
          button = options.button,
          buttonExpandClassName = options.buttonExpandClassName,
          panel = options.panel,
          panelExpandClassName = options.panelExpandClassName,
          _options$onShow = options.onShow,
          onShow = _options$onShow === void 0 ? null : _options$onShow,
          _options$onHide = options.onHide,
          onHide = _options$onHide === void 0 ? null : _options$onHide,
          _options$isDebounced = options.isDebounced,
          isDebounced = _options$isDebounced === void 0 ? false : _options$isDebounced;
      this.block = block;
      this.button = button;
      this.buttonExpandClassName = buttonExpandClassName;
      this.panel = panel;
      this.panelExpandClassName = panelExpandClassName;
      this.buttonExpandClassName = buttonExpandClassName;
      this.onShow = onShow;
      this.onHide = onHide;
      this.isDebounced = isDebounced;
      this.isExpand = false;
      this.setStartState = this.setStartState.bind(this);
      this.getHandlers = this.getHandlers.bind(this);
      this.debouncedShow = debounce(this.show.bind(this), 100);
      this.debouncedHide = debounce(this.hide.bind(this), 100);
      this.show = this.show.bind(this);
      this.hide = this.hide.bind(this);
      this.onBlockMouseLeave = this.onBlockMouseLeave.bind(this);
      this.addHoverHandlers = this.addHoverHandlers.bind(this);
      this.removeHoverHandlers = this.removeHoverHandlers.bind(this);
      this.onBlockMouseEnter = this.onBlockMouseEnter.bind(this);
      this.onBlockMouseLeave = this.onBlockMouseLeave.bind(this);
      this.onBlockFocusIn = this.onBlockFocusIn.bind(this);
      this.onBlockFocusOut = this.onBlockFocusOut.bind(this);
      this.addFocusHandler = this.addFocusHandler.bind(this);
      this.removeFocusHandlers = this.removeFocusHandlers.bind(this);
      this.removeHandlers = this.removeHandlers.bind(this);
    }

    _createClass(Dropdown, [{
      key: "setStartState",
      value: function setStartState() {
        this.button.setAttribute('role', 'menuitem');
        this.button.setAttribute('aria-haspopup', 'true');
        this.button.setAttribute('aria-expanded', 'false');
        this.button.classList.remove(this.buttonExpandClassName);
        this.panel.classList.remove(this.panelExpandClassName);
        this.panel.setAttribute('aria-hidden', 'true');
      }
    }, {
      key: "show",
      value: function show() {
        this.button.setAttribute('aria-expanded', 'true');
        this.button.classList.add(this.buttonExpandClassName);
        this.panel.classList.add(this.panelExpandClassName);
        this.panel.setAttribute('aria-hidden', 'false');
        this.isExpand = true;

        if (this.onShow) {
          this.onShow(this);
        }
      }
    }, {
      key: "hide",
      value: function hide() {
        this.button.setAttribute('aria-expanded', 'false');
        this.button.classList.remove(this.buttonExpandClassName);
        this.panel.classList.remove(this.panelExpandClassName);
        this.panel.setAttribute('aria-hidden', 'true');
        this.isExpand = false;

        if (this.onHide) {
          this.onHide(this);
        }
      }
    }, {
      key: "onBlockMouseLeave",
      value: function onBlockMouseLeave() {
        if (this.isDebounced) {
          this.debouncedHide();
        } else {
          this.hide();
        }

        this.removeHoverHandlers();
      }
    }, {
      key: "addHoverHandlers",
      value: function addHoverHandlers() {
        this.block.addEventListener('mouseleave', this.onBlockMouseLeave);
      }
    }, {
      key: "removeHoverHandlers",
      value: function removeHoverHandlers() {
        this.block.removeEventListener('mouseleave ', this.onBlockMouseLeave);
      }
    }, {
      key: "onBlockMouseEnter",
      value: function onBlockMouseEnter() {
        if (this.isDebounced) {
          this.debouncedShow();
        } else {
          this.show();
        }

        this.addHoverHandlers();
      }
    }, {
      key: "onBlockFocusOut",
      value: function onBlockFocusOut() {
        if (this.isDebounced) {
          this.debouncedHide();
        } else {
          this.hide();
        }

        this.removeFocusHandlers();
      }
    }, {
      key: "addFocusHandler",
      value: function addFocusHandler() {
        this.block.addEventListener('focusout', this.onBlockFocusOut);
      }
    }, {
      key: "removeFocusHandlers",
      value: function removeFocusHandlers() {
        this.block.removeEventListener('focusout', this.onBlockFocusOut);
      }
    }, {
      key: "onBlockFocusIn",
      value: function onBlockFocusIn() {
        if (this.isDebounced) {
          this.debouncedShow();
        } else {
          this.show();
        }

        this.addFocusHandler();
      }
    }, {
      key: "getHandlers",
      value: function getHandlers() {
        this.block.addEventListener('mouseenter', this.onBlockMouseEnter);
        this.block.addEventListener('focusin', this.onBlockFocusIn);
      }
    }, {
      key: "removeHandlers",
      value: function removeHandlers() {
        this.block.removeEventListener('mouseenter', this.onBlockMouseEnter);
        this.block.removeEventListener('focusin', this.onBlockFocusIn);

        if (this.isExpand) {
          this.removeHoverHandlers();
          this.removeFocusHandlers();
        }
      }
    }], [{
      key: "init",
      value: function init(options) {
        if (!options.button || !options.panel) {
          return;
        }

        var dropdown = new Dropdown(options);
        dropdown.getHandlers();
        dropdown.setStartState();
        return dropdown;
      }
    }]);

    return Dropdown;
  }();

  var dropdown = Dropdown.init;

  var DROPDOWN_RIGHT_POSITION_CLASS_NAME = 'main-nav__dropdown--right';
  var DROPDOWN_LONG_CLASS_NAME = 'main-nav__dropdown--long';
  var DROPDOWN_INCLUDED_BOX_BORDERED_CLASS_NAME = 'main-nav__included-box--bordered';
  var includedBoxCssCustomPropsName = '--box-height';
  var elements = {
    menu: '',
    topLevelBlocks: '',
    middleLevelBlocks: ''
  };
  var state = {
    topLevelDropdown: [],
    middleLevelDropdown: []
  };

  var destroyDropdown = function destroyDropdown(dropdown) {
    dropdown.removeHandlers();
    dropdown = null;
  };

  var onTopDropdownShow = function onTopDropdownShow(dropdown) {
    var _elements = elements,
        menu = _elements.menu;
    var LARGE_PANEL_WIDTH = 480;
    var menuRightPosition = menu.getBoundingClientRect().right;
    var buttonSizes = dropdown.button.getBoundingClientRect();
    var largePanelPosition = buttonSizes.left + LARGE_PANEL_WIDTH;

    if (largePanelPosition >= menuRightPosition) {
      dropdown.panel.classList.add(DROPDOWN_RIGHT_POSITION_CLASS_NAME);
    }
  };

  var onTopDropdownHide = function onTopDropdownHide(dropdown) {
    var dropdownBox = dropdown.panel.querySelector('.main-nav__included-box');
    dropdown.panel.classList.remove(DROPDOWN_RIGHT_POSITION_CLASS_NAME);
    dropdown.panel.classList.remove(DROPDOWN_LONG_CLASS_NAME);
    dropdownBox.classList.remove(DROPDOWN_INCLUDED_BOX_BORDERED_CLASS_NAME);
    dropdownBox.style.setProperty(includedBoxCssCustomPropsName, 'auto');
  };

  var setTopLevelDropdown = function setTopLevelDropdown() {
    var _elements2 = elements,
        topLevelBlocks = _elements2.topLevelBlocks;
    topLevelBlocks.forEach(function (block) {
      var button = block.querySelector('.main-nav__button');
      var panel = block.querySelector('.main-nav__dropdown');
      var options = {
        block: block,
        button: button,
        buttonExpandClassName: 'main-nav__button--expanded',
        panel: panel,
        panelExpandClassName: 'main-nav__dropdown--expanded',
        onShow: onTopDropdownShow,
        onHide: onTopDropdownHide
      };
      var dropdownInstance = dropdown(options);
      state.topLevelDropdown.push(dropdownInstance);
    });
  };

  var onMiddleDropdownShow = function onMiddleDropdownShow(dropdown) {
    var panel = dropdown.panel;
    var panelHeigh = panel.offsetHeight;
    var parentDropdown = panel.closest('.main-nav__dropdown');
    var dropdownBox = parentDropdown.querySelector('.main-nav__included-box');
    var dropdownBoxHeight = dropdownBox.offsetHeight;
    var isShortMenu = !parentDropdown.classList.contains(DROPDOWN_LONG_CLASS_NAME);

    if (isShortMenu) {
      parentDropdown.classList.add(DROPDOWN_LONG_CLASS_NAME);
      dropdownBox.classList.add(DROPDOWN_INCLUDED_BOX_BORDERED_CLASS_NAME);
    }

    if (dropdownBoxHeight < panelHeigh) {
      dropdownBox.style.setProperty(includedBoxCssCustomPropsName, "".concat(panelHeigh, "px"));
    }
  };

  var onMiddleDropdownHide = function onMiddleDropdownHide(dropdown) {
    var parentDropdown = dropdown.panel.closest('.main-nav__dropdown');
    var dropdownBox = parentDropdown.querySelector('.main-nav__included-box');
    parentDropdown.classList.remove(DROPDOWN_LONG_CLASS_NAME);
    dropdownBox.classList.remove(DROPDOWN_INCLUDED_BOX_BORDERED_CLASS_NAME);
  };

  var setMiddleLevelDropdown = function setMiddleLevelDropdown() {
    var _elements3 = elements,
        middleLevelBlocks = _elements3.middleLevelBlocks;
    middleLevelBlocks.forEach(function (block) {
      var button = block.querySelector('.main-nav__included-button');
      var panel = block.querySelector('.main-nav__middle-dropdown');
      var options = {
        block: block,
        button: button,
        buttonExpandClassName: 'main-nav__included-button--expanded',
        panel: panel,
        panelExpandClassName: 'main-nav__middle-dropdown--expanded',
        onShow: onMiddleDropdownShow,
        onHide: onMiddleDropdownHide,
        isDebounced: true
      };
      var dropdownInstance = dropdown(options);
      state.middleLevelDropdown.push(dropdownInstance);
    });
  };

  var destroy$2 = function destroy() {
    var _state = state,
        topLevelDropdown = _state.topLevelDropdown,
        middleLevelDropdown = _state.middleLevelDropdown;

    if (topLevelDropdown.length === 0 || middleLevelDropdown.length == 0) {
      return;
    }

    topLevelDropdown.forEach(function (dropdown) {
      return destroyDropdown(dropdown);
    });
    middleLevelDropdown.forEach(function (dropdown) {
      return destroyDropdown(dropdown);
    });
    topLevelDropdown = [];
    middleLevelDropdown = [];
    state = null;
  };

  var launch$2 = function launch() {
    state = {
      topLevelDropdown: [],
      middleLevelDropdown: []
    };
    setTopLevelDropdown();
    setMiddleLevelDropdown();
  };

  var init$3 = function init(elementsOptions) {
    elements = elementsOptions;
  };

  var headerDropdown = {
    init: init$3,
    launch: launch$2,
    destroy: destroy$2
  };

  var props = {
    top: {
      accordionBlocks: '',
      accordionProps: ''
    },
    middle: {
      accordionBlocks: '',
      accordionProps: ''
    }
  };
  var state$1 = {
    topLevelAccordions: null,
    middleLevelAccordions: null
  };
  var isLaunched$1 = false;

  var setAccordions = function setAccordions() {
    var _props = props,
        top = _props.top,
        middle = _props.middle;
    state$1.topLevelAccordions = accordionGroup(top);
    state$1.middleLevelAccordions = accordionGroup(middle);
  };

  var destroy$3 = function destroy() {
    var _state = state$1,
        topLevelAccordions = _state.topLevelAccordions,
        middleLevelAccordions = _state.middleLevelAccordions;

    if (isLaunched$1) {
      topLevelAccordions.remove();
      middleLevelAccordions.remove();
    }

    isLaunched$1 = false;
  };

  var launch$3 = function launch() {
    state$1 = {
      topLevelAccordions: null,
      middleLevelAccordions: null
    };
    setAccordions();
    isLaunched$1 = true;
  };

  var init$4 = function init(options) {
    props = options;
  };

  var headerAccordion = {
    init: init$4,
    launch: launch$3,
    destroy: destroy$3
  };

  var menuPopupInstance;

  var init$5 = function init(options) {
    menuPopupInstance = popup(options);
  };

  var hide = function hide() {
    menuPopupInstance.hide();
  };

  var clear = function clear() {
    menuPopupInstance.setStartState();
  };

  var hasShowState = function hasShowState() {
    return menuPopupInstance.isShow;
  };

  var menuPopup = {
    init: init$5,
    hide: hide,
    clear: clear,
    hasShowState: hasShowState
  };

  var SetElemHeightInCSSProps = /*#__PURE__*/function () {
    function SetElemHeightInCSSProps(elem, cssCustomPropsName) {
      _classCallCheck(this, SetElemHeightInCSSProps);

      this.elem = elem;
      this.cssCustomPropsName = cssCustomPropsName;
      this.elemSize = null;
      this.setCSSPropsValue = this.setCSSPropsValue.bind(this);
      this.setSize = this.setSize.bind(this);
      this.debouncedSetSize = debounce(this.setSize, 300).bind(this);
    }

    _createClass(SetElemHeightInCSSProps, [{
      key: "setSize",
      value: function setSize() {
        var height = this.elem.offsetHeight;

        if (this.elemSize !== height) {
          this.elemSize = height;
          this.setCSSPropsValue(height);
        }
      }
    }, {
      key: "setCSSPropsValue",
      value: function setCSSPropsValue(heightSize) {
        document.documentElement.style.setProperty(this.cssCustomPropsName, "".concat(heightSize, "px"));
      }
    }, {
      key: "addHandler",
      value: function addHandler() {
        window.addEventListener('resize', this.debouncedSetSize);
      }
    }], [{
      key: "init",
      value: function init(elem, cssCustomPropsName) {
        if (!elem) return;
        var setElemHeight = new SetElemHeightInCSSProps(elem, cssCustomPropsName);
        setElemHeight.setSize();
        setElemHeight.addHandler();
      }
    }]);

    return SetElemHeightInCSSProps;
  }();

  var setElemHeightInCSSProps = SetElemHeightInCSSProps.init;

  var CSS_CUSTOM_PROPS_HEADER_HEIGHT = '--header-height';
  var laptopMax = constants.breakpoints.laptopMax;

  var getMenuPopupOptions = function getMenuPopupOptions(header) {
    return {
      modal: header.querySelector('.header__content-box'),
      openButton: header.querySelector('.header__burger-button'),
      closeButton: header.querySelector('.header__close-button'),
      modalOpenClassName: 'header__content-box--open',
      modalCloseClassName: 'header__content-box--close'
    };
  };

  var getDropdownOptions = function getDropdownOptions(header) {
    return {
      menu: header.querySelector('.main-nav'),
      topLevelBlocks: header.querySelectorAll('.main-nav__top-block'),
      middleLevelBlocks: header.querySelectorAll('.main-nav__middle-block')
    };
  };

  var getAccordionsOptions = function getAccordionsOptions(header) {
    return {
      top: {
        accordionBlocks: header.querySelectorAll('.main-nav__top-block'),
        accordionProps: {
          triggerClassName: 'main-nav__button',
          detailsClassName: 'main-nav__dropdown',
          triggerExpandedClassName: 'main-nav__button--expanded'
        }
      },
      middle: {
        accordionBlocks: header.querySelectorAll('.main-nav__middle-block'),
        accordionProps: {
          triggerClassName: 'main-nav__included-button',
          detailsClassName: 'main-nav__middle-dropdown',
          triggerExpandedClassName: 'main-nav__included-button--expanded'
        }
      }
    };
  };

  var onOfferModalButtonClick = function onOfferModalButtonClick() {
    var isMenuShow = menuPopup.hasShowState();

    if (isMenuShow) {
      menuPopup.hide();
    }
  };

  var getOfferModalProps = function getOfferModalProps(header) {
    return {
      openButton: header.querySelector('.js-open-modal'),
      onOpenButtonClick: onOfferModalButtonClick
    };
  };

  var onDesktopViewPort = function onDesktopViewPort() {
    headerDropdown.launch();
    headerAccordion.destroy();
    menuPopup.clear();
  };

  var onNoDesktopViewport = function onNoDesktopViewport() {
    headerDropdown.destroy();
    headerAccordion.launch();
  };

  var init$6 = function init() {
    var header = document.querySelector('.js-header');
    if (!header) return;
    var menuPopupOptions = getMenuPopupOptions(header);
    var menuDropdownOptions = getDropdownOptions(header);
    var menuAccordionsOptions = getAccordionsOptions(header);
    var offerModalProps = getOfferModalProps(header);
    setElemHeightInCSSProps(header, CSS_CUSTOM_PROPS_HEADER_HEIGHT);
    menuPopup.init(menuPopupOptions);
    headerDropdown.init(menuDropdownOptions);
    headerAccordion.init(menuAccordionsOptions);
    offerModal(offerModalProps);
    breakpointChecker(laptopMax, onNoDesktopViewport, onDesktopViewPort);
  };

  var page = document.documentElement;
  var CSSPropsName = '--page-height';

  var setPageHeight = function setPageHeight() {
    setElemHeightInCSSProps(page, CSSPropsName);
  };

  var global = function global() {
    setPageHeight();
    init$6();
  };

  var router = {
    pages: {
      main: mainPage
    },
    global: global
  };

  var getRoute = function getRoute() {
    var documentClassNames = document.documentElement.className;
    var routePattern = /(js-route-)\S+/gm;
    var routeExact = documentClassNames.match(routePattern);
    return routeExact ? routeExact[0].replace('js-route-', '') : null;
  };

  var route = getRoute();
  router.global();

  if (route) {
    router.pages[route]();
  }

}());

//# sourceMappingURL=index.min.js.map
